/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sa_visualization;

import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author putu
 */
public class DataForm extends javax.swing.JFrame {
    
    ArrayList<String> permutationList;
    float[][] distance;
    
    float sortest=Integer.MAX_VALUE;
    ArrayList<Integer> listOfBest = new ArrayList<>();
    
    DefaultTableModel model;
    DefaultTableModel model3;
    
    SAForm parent;
            
    /**
     * Creates new form DataForm
     */
    public DataForm(ArrayList<String> permutationList, float[][] distance, SAForm parent) {
        this.permutationList = permutationList;
        this.distance = distance;
        this.parent = parent;
        setDefaultLookAndFeelDecorated(true);
        initComponents(); 
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setResizable(false);
        
        //addrow to permutation
        model = (DefaultTableModel) jTable1.getModel();
        model3 = (DefaultTableModel) jTable3.getModel();
                
        ShowDataRunnable show = new ShowDataRunnable();
        Thread t = new Thread(show);
        t.start();
        //jTable1.setAutoCreateRowSorter(true);
    }

    public class ShowDataRunnable implements Runnable {
        public ShowDataRunnable() {}

        public void run() {
            jTable2.setRowHeight(40);
            for (int i = 0; i < distance.length; i++) {
                for (int j = 0; j < distance.length; j++) {
                    jTable2.setValueAt(Math.round(distance[i][j] * 1000.0) / 1000.0, i, j+1);
                }
            }
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment( JLabel.CENTER );
            jTable2.setDefaultRenderer(String.class, centerRenderer);
        
            for (int i = 0; i < permutationList.size(); i++) {
                String permutation = permutationList.get(i);
                model.addRow(new Object[]{i+1, permutation+permutation.substring(0, 1), calculateFX(permutation, i+1), 0});
            }

            //tell user sortest path
            String sorteststr=" Sortest is number: ";
            int no=0;
            for (int i=0; i<listOfBest.size();i++) {
                sorteststr+= no+", ";
                no = listOfBest.get(i);
                String permutation = permutationList.get(no-1);
                model3.addRow(new Object[]{no, permutation+permutation.substring(0, 1), sortest, 0});
            }
            System.out.println(calculateFX(permutationList.get(no-1), no));
            sorteststr = sorteststr.substring(0, sorteststr.length()-2);
            sorteststr+=" [ f(x):"+sortest+" ]";
            jLabel1.setText((listOfBest.size()-1)+" best found with "+" f(x)= "+sortest);
            System.out.println(sorteststr);
            parent.setReady();
        }
    }
    
    private float calculateFX(String permutation, int no ){
        float totalDistance = 0;
        
        for (int i = 0; i < permutation.length(); i++) {
            char currentC = permutation.charAt(i);
            int cur = ((int)currentC)-65;
            
            if(i<permutation.length()-1) {                
                char nextC = permutation.charAt(i+1);
                int next = ((int)nextC)-65;
                totalDistance += distance[cur][next];
            }
            else {
                char firstC = permutation.charAt(0);
                int first = ((int)firstC)-65;
                totalDistance += distance[cur][first];
            }
        }
        
        //check if this is the best
        if(sortest>totalDistance){
            sortest = totalDistance;
            listOfBest = new ArrayList<>();
            listOfBest.add(no);
            //System.out.println("lest:" +no);
        }
        else if(sortest==totalDistance){
            listOfBest.add(no);
            //System.out.println("same:" +no);
        }
        else{
            //System.out.println("more:" +no);
        }
        
        return totalDistance;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Route", "F(x)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"A", null, null, null, null, null, null, null, null, null, null},
                {"B", null, null, null, null, null, null, null, null, null, null},
                {"C", null, null, null, null, null, null, null, null, null, null},
                {"D", null, null, null, null, null, null, null, null, null, null},
                {"E", null, null, null, null, null, null, null, null, null, null},
                {"F", null, null, null, null, null, null, null, null, null, null},
                {"G", null, null, null, null, null, null, null, null, null, null},
                {"H", null, null, null, null, null, null, null, null, null, null},
                {"I", null, null, null, null, null, null, null, null, null, null},
                {"J", null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setEnabled(false);
        jScrollPane2.setViewportView(jTable2);

        jLabel1.setText("Calculating....");

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Route", "F(x)"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        jLabel2.setText("Distance matrix:");

        jLabel3.setText("Best :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 766, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    // End of variables declaration//GEN-END:variables
}
