/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sa_visualization;

import java.util.ArrayList;
import java.util.Random;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author putu
 */
public class RunnerForm extends javax.swing.JFrame {

    /**
     * Creates new form RunnerForm
     */
    public RunnerForm() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Number of node ( 3 - 10 ) :");

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(10, 4, 10, 1));

        jButton1.setText("Create");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Status:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // calculate all posible permutation
        
        jButton1.setEnabled(false);
        jLabel2.setText("Status: Calculating, please wait");
        int node = (Integer) jSpinner1.getValue();
        CalculateRunnable calc = new CalculateRunnable(node, this);
        Thread t = new Thread(calc);
        t.start();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    public class CalculateRunnable implements Runnable {

        private int node;
        private JFrame frame;
        public CalculateRunnable(int node, JFrame frame) {
            this.node = node;
            this.frame = frame;
        }

        public void run() {
            
            ArrayList<Character> current = new ArrayList<Character>();
            for (int i = 1; i <= node; i++) {
                current.add((char)(64+i));
            }

            ArrayList<String> results =  new ArrayList<String>();
            doPermute(0, current, results);
            //System.out.println(results);
            //make a node object


            Random random = new Random();
            ArrayList<Node> nodeList = new ArrayList<Node>();
            for (int i = 0; i < node; i++) {
                nodeList.add(new Node(current.get(i),600,600, random));
            }


            //calculate distance matrix
            float[][] distance = calcDistance(nodeList);
            for (int i = 0; i < nodeList.size(); i++) {
                for (int j = 0; j < nodeList.size(); j++) {
                    System.out.print(distance[i][j]+"\t,");
                } 
                System.out.println("");
            }

            SAForm saForm = new SAForm(nodeList, distance, results);
            saForm.setVisible(true);
            frame.setVisible(false);
        }
    }
    
    public float[][] calcDistance(ArrayList<Node> nodeList){
        float[][] distance = new float[nodeList.size()][nodeList.size()];
        
        for (int i = 0; i < nodeList.size(); i++) {
            for (int j = 0; j < nodeList.size(); j++) {
                Node one = nodeList.get(i);
                Node two = nodeList.get(j);
                if(i!=j) distance[i][j] = (float)Math.sqrt(Math.pow(one.getX()-two.getX(), 2)+Math.pow(one.getY()-two.getY(), 2));
                else distance[i][j] = 0;
            }
        }
        
        return distance;
    }
    public static void swap(int i, int j, ArrayList<Character> list) {
 
        char temp = list.get(i);
        list.set(i, list.get(j));
        list.set(j, temp);
        
 
    }
 
    public static void doPermute(int pos, ArrayList<Character> current, ArrayList<String> results) {
        
        if ((current.size() -1) == pos) {
            String s = "";
            for (char c : current){
                s+= c;
            }
            results.add(s);
        }else {
            for (int i=pos;i<current.size() ;i++) {
                if (i!= (current.size()-1) && current.get(i) == current.get(i+1)) {
                    continue;
                }
                
                swap(i, pos, current);
                doPermute(pos+1, current, results);
                swap(i, pos, current);
            }
        }
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSpinner jSpinner1;
    // End of variables declaration//GEN-END:variables
}
